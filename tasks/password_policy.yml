- name: Check if pam_pwquality is configured
  ansible.builtin.shell: |
    grep -E 'pam_pwquality.so' /etc/pam.d/system-auth || true
  register: pam_pwquality_check
  changed_when: false

- name: Set variables based on PAM presence
  ansible.builtin.set_fact:
    pam_enabled: "{{ pam_pwquality_check.stdout != '' }}"

- name: Debug which method will be used
  ansible.builtin.debug:
    msg: >-
      PAM is {{ 'enabled' if pam_enabled else 'not enabled' }}. Proceeding accordingly.

# ----------------------------------------
# When PAM is enabled
# ----------------------------------------

- name: Ensure minlen is set in pwquality.conf (PAM method)
  ansible.builtin.lineinfile:
    path: /etc/security/pwquality.conf
    regexp: '^minlen'
    line: "minlen = {{ password_minlen }}"
    create: yes
  when: pam_enabled

- name: Ensure password history (remember) is set to 5 in system-auth
  ansible.builtin.replace:
    path: /etc/pam.d/system-auth
    regexp: '^(password\s+sufficient\s+pam_unix\.so.*)(remember=\d+)?(.*)$'
    replace: '\1 remember=5\3'
    backup: yes
  when: pam_enabled

# ----------------------------------------
# When PAM is NOT enabled
# ----------------------------------------

- name: Set PASS_MIN_LEN in /etc/login.defs (non-PAM method)
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_MIN_LEN'
    line: "PASS_MIN_LEN {{ password_minlen }}"
    create: yes
  when: not pam_enabled

- name: Set PASS_MAX_LEN in /etc/login.defs (reference only)
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_MAX_LEN'
    line: "PASS_MAX_LEN {{ password_maxlen }}"
    create: yes
  when: not pam_enabled
